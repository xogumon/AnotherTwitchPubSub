{"version":3,"file":"twitch.pubsub.js","mappings":"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","sources":["webpack://anothertwitchpubsub/./src/utils/functions.ts","webpack://anothertwitchpubsub/./src/twitch.pubsub.ts"],"sourcesContent":["export default {\r\n  /**\r\n   * Lowercase a array items\r\n   * @param arr Array to lowercase\r\n   * @returns Array with all items lowercased\r\n   * @example\r\n   * const arr = ['THIS', 'IS', 'A', 'TEST'];\r\n   * const lowercased = utils.arrayLowerCase(arr);\r\n   * console.log(lowercased); // ['this', 'is', 'a', 'test']\r\n   */\r\n  arrayLowerCase(arr: any[]) {\r\n    return arr.map((item) => item.toLowerCase());\r\n  },\r\n  /**\r\n   * Repeat a method a number of times\r\n   * @param fn Method to repeat\r\n   * @param times Number of times to repeat\r\n   * @returns Array with the repeated method\r\n   * @example\r\n   * const repeat = utils.repeat(() => 1, 5);\r\n   * console.log(repeat); // [1, 1, 1, 1, 1]\r\n   */\r\n  repeat(fn: Function, times: number) {\r\n    let result = [];\r\n    for (let i = 0; i < times; i++) {\r\n      result.push(fn());\r\n    }\r\n    return result;\r\n  },\r\n  /**\r\n   * Generate a random nonce\r\n   * @returns Random nonce\r\n   */\r\n  nonce() {\r\n    const random = () => Math.random().toString(36).substring(2, 15);\r\n    return this.repeat(random, 2).join(\"\");\r\n  },\r\n  /**\r\n   * Slugify a string\r\n   * @param str String to slugify\r\n   * @param sep Separator to use\r\n   * @returns Slugified string\r\n   * @example\r\n   * const slug = utils.slug(\"This is a string\", \"-\");\r\n   * console.log(slug); // this-is-a-string\r\n   */\r\n  slug(str: string, sep: string = \"-\") {\r\n    if (typeof str !== \"string\") return \"\";\r\n    if (typeof sep !== \"string\") sep = \"-\";\r\n    str = str.toLowerCase().replace(/[^a-z0-9]/g, sep); // replace all non-alphanumeric characters with the separator\r\n    if (sep.length > 0) {\r\n      str = str\r\n        .replace(new RegExp(`${sep}{2,}`, \"g\"), sep) // replace multiple separators with a single one\r\n        .replace(new RegExp(`^${sep}|${sep}$`, \"g\"), \"\"); // remove leading and trailing separators\r\n    }\r\n    return str; // return the slug\r\n  },\r\n  /**\r\n   * Remove duplicate values from an array\r\n   * @param arr Array to remove duplicates from\r\n   * @returns Array with no duplicates\r\n   * @example\r\n   * const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n   * const unique = utils.removeDuplicates(arr);\r\n   * console.log(unique); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n   */\r\n  removeDuplicates(arr: any[]) {\r\n    return arr.filter((item, index) => arr.indexOf(item) === index);\r\n  },\r\n};\r\n","import utils from \"./utils/functions\";\r\n/**\r\n * Interface for options passed to the class constructor.\r\n * @property {string} [channelId] - The id of the channel to subscribe to.\r\n * @property {string} [authToken] - The authentication token to use.\r\n * @property {boolean} [autoConnect] - Whether to automatically connect to the server.\r\n * @property {boolean} [autoReconnect] - Whether to automatically reconnect to the server if the connection is lost.\r\n * @property {number} [reconnectAttempts] - The number of reconnect attempts to make before giving up.\r\n * @property {number} [reconnectInterval] - The time to wait between reconnect attempts.\r\n * @property {string[]} [topics] - The topics to subscribe to.\r\n */\r\ninterface AnotherTwitchPubSubOptions {\r\n  channelId: string;\r\n  authToken: string;\r\n  autoConnect: boolean;\r\n  autoReconnect: boolean;\r\n  reconnectAttempts: number;\r\n  reconnectInterval: number;\r\n  topics: string[];\r\n}\r\n\r\n/**\r\n * @class AnotherTwitchPubSub\r\n * @classdesc AnotherTwitchPubSub is a class that allows you to subscribe to Twitch PubSub topics.\r\n * @param {string} channelId - The channel ID of the channel you want to subscribe to.\r\n * @param {string} authToken - The authentication token of the channel you want to subscribe to.\r\n * @param {boolean} autoConnect - Whether or not to automatically connect to Twitch PubSub.\r\n * @param {boolean} autoReconnect - Whether or not to automatically reconnect to Twitch PubSub if the connection is lost.\r\n * @param {number} reconnectAttempts - The number of reconnect attempts to make before giving up.\r\n * @param {number} reconnectInterval - The time in milliseconds between reconnect attempts.\r\n * @param {string[]} topics - The topics you want to subscribe to.\r\n * @example\r\n * const pubsub = new TwitchPubSub({\r\n *  channelId: 'channelId',\r\n *  authToken: 'authToken',\r\n *  autoConnect: true,\r\n *  autoReconnect: true,\r\n *  reconnectAttempts: 10,\r\n *  reconnectInterval: 1000,\r\n *  topics: ['topic1', 'topic2']\r\n * });\r\n * pubsub.on('message', (topic, message) => {\r\n *  console.log(topic, message);\r\n * });\r\n */\r\nclass AnotherTwitchPubSub {\r\n  constructor(options: AnotherTwitchPubSubOptions) {\r\n    this._options = Object.assign({}, this._options, options);\r\n    this._options.topics = utils.arrayLowerCase(this._options.topics);\r\n    if (\r\n      this._options.channelId === undefined ||\r\n      this._options.authToken === undefined ||\r\n      this._options.topics === undefined ||\r\n      this._options.topics.length === 0 ||\r\n      this._options.topics.length > 50 ||\r\n      this._options.topics.some((topic) => typeof topic !== \"string\")\r\n    ) {\r\n      throw new Error(\"Invalid options\");\r\n    }\r\n    if (this._options.autoConnect) {\r\n      this._connect();\r\n    }\r\n    return this.on(\r\n      \"connected\",\r\n      this._subscribe.bind(this, this._options.topics)\r\n    );\r\n  }\r\n  _client: WebSocket | undefined;\r\n  _events: { [eventName: string]: Array<Function> } = {};\r\n  _options: AnotherTwitchPubSubOptions = {\r\n    // default options\r\n    channelId: \"\", // the channel id to subscribe to\r\n    authToken: \"\", // the authentication token to use\r\n    autoConnect: true, // whether to connect automatically\r\n    autoReconnect: true, // whether to reconnect automatically\r\n    reconnectAttempts: 10, // the number of reconnect attempts\r\n    reconnectInterval: 1000, // the interval between reconnect attempts\r\n    topics: [], // the topics to subscribe to\r\n  };\r\n  _reconnectAttempts: number = 0;\r\n  _pingTimestamp: number = 0;\r\n  _latency: number = 0;\r\n  _heartbeatTimer: ReturnType<typeof setTimeout> | undefined;\r\n  _heartbeatTimeout: number = 6e4;\r\n\r\n  /**\r\n   * Heartbeat function to keep the connection alive and to send a ping to the server\r\n   */\r\n  _heartbeat() {\r\n    if (this.state() === \"open\") {\r\n      this._client?.send(JSON.stringify({ type: \"PING\" }));\r\n      this._pingTimestamp = Date.now();\r\n      this._emit(\"ping\", \"Ping sent\");\r\n      clearTimeout(this._heartbeatTimer);\r\n      this._heartbeatTimer = setTimeout(\r\n        this._heartbeat.bind(this),\r\n        this._heartbeatTimeout\r\n      );\r\n    } else {\r\n      this._latency = 0;\r\n      clearTimeout(this._heartbeatTimer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Connect to the pubsub websocket\r\n   * @returns This instance (for chaining)\r\n   * @private\r\n   * @example\r\n   * pubsub._connect().then(() => {\r\n   *  console.log(\"Connected!\");\r\n   * });\r\n   */\r\n  async _connect() {\r\n    await new Promise((resolve, reject) => {\r\n      if (this.state() === \"closed\") {\r\n        this._client = new WebSocket(\"wss://pubsub-edge.twitch.tv\");\r\n        this._client.onopen = this._clientOpen.bind(this);\r\n        this._client.onclose = this._clientClose.bind(this);\r\n        this._client.onerror = this._clientError.bind(this);\r\n        this._client.onmessage = this._clientMessage.bind(this);\r\n      } else {\r\n        resolve(null);\r\n      }\r\n      this.on(\"connected\", () => {\r\n        resolve(null);\r\n      })\r\n        .on(\"error\", (err: Event) => {\r\n          if (err instanceof Error) reject(err);\r\n        })\r\n        .on(\"disconnected\", (e: CloseEvent) => {\r\n          if (!e.wasClean) reject(e);\r\n        });\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Disconnect from the pubsub websocket\r\n   * @returns This instance (for chaining)\r\n   * @private\r\n   * @example\r\n   * pubsub._disconnect().then(() => {\r\n   *  console.log(\"Disconnected!\");\r\n   * });\r\n   */\r\n  async _disconnect() {\r\n    await new Promise((resolve) => {\r\n      if (this.state() === \"open\") {\r\n        this._client?.close(1000, \"Closed by user\");\r\n      } else if (this.state() === \"closed\") {\r\n        resolve(null);\r\n      }\r\n      this.on(\"disconnected\", () => {\r\n        resolve(null);\r\n      });\r\n    });\r\n    this._client = undefined;\r\n    return this;\r\n  }\r\n\r\n  /** Reconnect to the pubsub websocket\r\n   * @returns This instance (for chaining)\r\n   * @private\r\n   * @example\r\n   * pubsub.reconnect().then(() => {\r\n   *  console.log(\"Reconnected!\");\r\n   * });\r\n   */\r\n  async _reconnect() {\r\n    await new Promise((resolve, reject) => {\r\n      this._disconnect().then(() => {\r\n        this._reconnectAttempts++;\r\n        if (this._reconnectAttempts <= this._options.reconnectAttempts) {\r\n          setTimeout(this._connect.bind(this), this._options.reconnectInterval);\r\n        } else {\r\n          this._reconnectAttempts = 0;\r\n          reject(new Error(\"Reconnect attempts exceeded\"));\r\n        }\r\n      });\r\n      this.on(\"connected\", () => {\r\n        this._reconnectAttempts = 0;\r\n        resolve(null);\r\n      }).on(\"error\", (e: any[]) => {\r\n        reject(e);\r\n      });\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Send a message to the pubsub websocket\r\n   * @param data Data to send\r\n   * @private\r\n   * @returns This instance (for chaining)\r\n   * @example\r\n   * pubsub._send({\r\n   *  type: \"PING\"\r\n   * }).then(() => {\r\n   *  console.log(\"Message sent!\");\r\n   * });\r\n   */\r\n  async _send(data: object) {\r\n    await new Promise((resolve, reject) => {\r\n      if (this.state() === \"open\") {\r\n        resolve(this._client?.send(JSON.stringify(data)));\r\n      } else {\r\n        reject(new Error(\"Not connected\"));\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Subscribe to a topic or topics (if an array is provided)\r\n   * @param topics Topics to subscribe to\r\n   * @private\r\n   * @returns This instance (for chaining)\r\n   * @example\r\n   * pubsub._subscribe(\"test\").then(() => {\r\n   *  console.log(\"Subscribed!\");\r\n   * });\r\n   */\r\n  async _subscribe(topics: string[]) {\r\n    await new Promise((resolve, reject) => {\r\n      if (this.state() !== \"open\") {\r\n        reject(new Error(\"Not connected\"));\r\n      } else {\r\n        if (!Array.isArray(topics)) {\r\n          topics = [topics];\r\n        }\r\n        topics = utils.arrayLowerCase(topics);\r\n        topics = utils.removeDuplicates(topics);\r\n        topics = topics.filter((topic) => this._isValidTopic(topic));\r\n        if (topics.length > 0) {\r\n          this._send({\r\n            type: \"LISTEN\",\r\n            nonce: utils.nonce(),\r\n            data: {\r\n              topics: topics.map(\r\n                (topic) => `${topic}.${this._options.channelId}`\r\n              ),\r\n              auth_token: this._options.authToken,\r\n            },\r\n          })\r\n            .then(() => {\r\n              this._addTopics(topics);\r\n              resolve(null);\r\n            })\r\n            .catch((e) => {\r\n              reject(e);\r\n            });\r\n        } else {\r\n          resolve(null);\r\n        }\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from a topic or topics (if an array is provided)\r\n   * @param topics Topics to unsubscribe from (if omitted, all topics are unsubscribed)\r\n   * @private\r\n   * @returns This instance (for chaining)\r\n   * @example\r\n   * pubsub._unsubscribe(\"test\").then(() => {\r\n   *  console.log(\"Unsubscribed!\");\r\n   * });\r\n   */\r\n  async _unsubscribe(topics: string[]) {\r\n    await new Promise((resolve, reject) => {\r\n      if (this.state() !== \"open\") {\r\n        reject(new Error(\"Not connected\"));\r\n      } else {\r\n        if (!Array.isArray(topics)) {\r\n          topics = [topics];\r\n        }\r\n        topics = utils.arrayLowerCase(topics);\r\n        topics = utils.removeDuplicates(topics);\r\n        topics = topics.filter((topic) => this._isValidTopic(topic));\r\n        topics = (topics || this._options.topics).map(\r\n          (topic) => `${topic}.${this._options.channelId}`\r\n        );\r\n        if (topics.length > 0) {\r\n          this._send({\r\n            type: \"UNLISTEN\",\r\n            nonce: utils.nonce(),\r\n            data: {\r\n              topics,\r\n              auth_token: this._options.authToken,\r\n            },\r\n          })\r\n            .then(() => {\r\n              this._removeTopics(topics);\r\n              resolve(null);\r\n            })\r\n            .catch((e) => {\r\n              reject(e);\r\n            });\r\n        } else {\r\n          resolve(null);\r\n        }\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Open event handler (Client)\r\n   * @private\r\n   */\r\n  _clientOpen() {\r\n    this._emit(\"connected\");\r\n  }\r\n\r\n  /**\r\n   * Close event handler (Client)\r\n   * @param event Event\r\n   * @private\r\n   */\r\n  _clientClose(event: CloseEvent) {\r\n    if (!event.wasClean && this._options.autoReconnect) {\r\n      this._reconnect();\r\n    }\r\n    let message = \"\";\r\n    switch (event.code) {\r\n      case 1000:\r\n        message = \"Normal closure\";\r\n        break;\r\n      case 1001:\r\n        message = \"Going away\";\r\n        break;\r\n      case 1002:\r\n        message = \"Protocol error\";\r\n        break;\r\n      case 1003:\r\n        message = \"Unsupported data\";\r\n        break;\r\n      case 1006:\r\n        message = \"Abnormal closure\";\r\n        break;\r\n      case 1007:\r\n        message = \"Invalid data\";\r\n        break;\r\n      case 1008:\r\n        message = \"Policy violation\";\r\n        break;\r\n      case 1009:\r\n        message = \"Message too big\";\r\n        break;\r\n      case 1010:\r\n        message = \"Mandatory extension\";\r\n        break;\r\n      case 1011:\r\n        message = \"Internal server error\";\r\n        break;\r\n      default:\r\n        message = \"Unknown error\";\r\n        break;\r\n    }\r\n    clearTimeout(this._heartbeatTimer);\r\n    this._emit(\"disconnected\", {\r\n      message,\r\n      reason: event.reason,\r\n      code: event.code,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Message event handler (Client)\r\n   * @param event The event that was received\r\n   * @private\r\n   */\r\n  _clientMessage(event: MessageEvent) {\r\n    const eventData = JSON.parse(event.data);\r\n    const { type, data } = eventData;\r\n    switch (type) {\r\n      case \"PONG\":\r\n        this._onPong();\r\n        break;\r\n      case \"MESSAGE\":\r\n        this._onMessage(eventData);\r\n        break;\r\n      case \"RESPONSE\":\r\n        this._onResponse(eventData);\r\n        break;\r\n      case \"LISTEN\":\r\n      case \"UNLISTEN\":\r\n        this._emit(type, data);\r\n      case \"RECONNECT\":\r\n      case \"DISCONNECT\":\r\n        this._emit(type);\r\n        break;\r\n      default:\r\n        this._onError(new Error(`Unknown message type: ${type}`));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Error event handler (Client)\r\n   * @param event The event that was received\r\n   * @private\r\n   */\r\n  _clientError(event: ErrorEvent) {\r\n    this._onError(event.error);\r\n  }\r\n\r\n  /**\r\n   * Error event handler\r\n   * @param event The error event\r\n   * @private\r\n   */\r\n  _onError(event: any) {\r\n    if (event instanceof Error) {\r\n      this._emit(\"error\", event.message);\r\n    } else {\r\n      this._emit(\"error\", event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Message event handler\r\n   * @param data The event that was received\r\n   * @private\r\n   */\r\n  _onMessage(data: any) {\r\n    // Emit raw message as message event\r\n    this._emit(\"message\", data);\r\n    // Topic and messages (message is a data object from raw message)\r\n    const { topic, message } = data.data;\r\n    // Emit message event for topic\r\n    this._emit(topic, JSON.parse(message));\r\n    // messageType is the type of topic and messageData is the data of the message\r\n    const { type: messageType, data: messageData } = JSON.parse(message);\r\n    const topicEvents = [\r\n      \"channel-points-channel\",\r\n      \"channel-bits-events\",\r\n      \"channel-bits-badge-unlocks\",\r\n      \"channel-subscribe-events\",\r\n      \"whispers\",\r\n    ];\r\n    // Find the event name for the topic\r\n    const eventName = topicEvents.find((event) => topic.includes(event));\r\n    // Handle events for each topic\r\n    switch (eventName) {\r\n      case \"channel-points-channel\":\r\n        // Channel points events\r\n        this._onChannelPointsEvent({\r\n          type: messageType,\r\n          data: messageData,\r\n        });\r\n        break;\r\n      case \"channel-bits-events\":\r\n      case \"channel-bits-badge-unlocks\":\r\n        // Channel bits events and badge unlocks\r\n        this._onBitsEvent({\r\n          type: eventName,\r\n          data: messageData,\r\n        });\r\n        break;\r\n      case \"channel-subscribe-events\":\r\n        // Channel subscription events\r\n        this._onSubEvent(messageData);\r\n        break;\r\n      case \"whispers\":\r\n        // Whisper events\r\n        this._onWhisperEvent({\r\n          type: messageData.type,\r\n          data: data.data_object,\r\n        });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Response event handler\r\n   * @param data The response data\r\n   * @private\r\n   */\r\n  _onResponse(data: any) {\r\n    let errorMessage: string;\r\n    if (data?.error) {\r\n      switch (data.error) {\r\n        case \"ERR_BADAUTH\":\r\n          errorMessage = \"Invalid authentication token\";\r\n          break;\r\n        case \"ERR_BADTOPIC\":\r\n          errorMessage = \"Invalid topic\";\r\n          break;\r\n        case \"ERR_BADMESSAGE\":\r\n          errorMessage = \"Invalid message\";\r\n          break;\r\n        case \"ERR_SERVER\":\r\n          errorMessage = \"Server error\";\r\n          break;\r\n        default:\r\n          errorMessage = \"Unknown error\" + data.error;\r\n          break;\r\n      }\r\n      this._onError(errorMessage);\r\n    } else {\r\n      if (data) this._emit(\"response\", data);\r\n      this._heartbeat(); // start the heartbeat\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pong event handler\r\n   * @private\r\n   */\r\n  _onPong() {\r\n    clearTimeout(this._heartbeatTimer);\r\n    this._heartbeatTimer = setTimeout(\r\n      this._heartbeat.bind(this),\r\n      this._heartbeatTimeout\r\n    );\r\n    this._latency = Date.now() - this._pingTimestamp;\r\n    this._emit(\"pong\", this._latency);\r\n    if (this._latency > 1e4) {\r\n      if (this._options.autoReconnect) {\r\n        this._reconnect();\r\n      } else {\r\n        // if latency is greater than 10 seconds\r\n        this._emit(\"warning\", {\r\n          message: \"Latency is very high\",\r\n          latency: this._latency,\r\n        });\r\n      }\r\n    } else if (this._latency > 1e3) {\r\n      // if latency is greater than 1 second\r\n      this._emit(\"warning\", {\r\n        message: \"Latency is high\",\r\n        latency: this._latency,\r\n      });\r\n    } else if (this._latency > 1e2) {\r\n      // if latency is greater than 100 milliseconds\r\n      this._emit(\"warning\", {\r\n        message: \"Latency is medium\",\r\n        latency: this._latency,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Bits event handler\r\n   * @param data The data object\r\n   * @private\r\n   */\r\n  _onBitsEvent({ type, data }: { type: string; data: any }) {\r\n    switch (type) {\r\n      case \"channel-bits-events\":\r\n        this._emit(\"bits\", data);\r\n        break;\r\n      case \"channel-bits-badge-unlocks\":\r\n        this._emit(\"bitsbadge\", data);\r\n        break;\r\n      default:\r\n        this._onError(new Error(`Unknown message type: ${type}`));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Subscription event handler\r\n   * (sub, resub, subgift, anonsubgift)\r\n   * @param data The data object\r\n   * @private\r\n   */\r\n  _onSubEvent(data: any) {\r\n    this._emit(data.context, {\r\n      userId: data.user_id || null, // user id of the user who subscribed\r\n      userName: data.user_name || null, // user name of the user who subscribed\r\n      displayName: data.display_name || null, // display name of the user who subscribed\r\n      channelId: data.channel_id, // channel id of the channel the subscription was made in\r\n      channelName: data.channel_name, // channel name of the channel the subscription was made in\r\n      time: data.time, // time the subscription was made\r\n      subPlan: data.sub_plan, // subscription plan the user subscribed to\r\n      subPlanName: data.sub_plan_name, // subscription plan name the user subscribed to\r\n      isGift: data.is_gift || false, // whether the subscription was a gift subscription\r\n      months: data.months || null, // number of months the subscription was for\r\n      cumulativeMonths: data.cumulative_months || null, // number of cumulative months the user has subscribed for\r\n      streakMonths: data.streak_months || null, // number of months the user has been subscribed for in a row\r\n      subMessage: data.sub_message || null, // subscription message the user sent\r\n      recipientId: data.recipient_id || null, // user id of the user the subscription was gifted to\r\n      recipientUserName: data.recipient_user_name || null, // user name of the user the subscription was gifted to\r\n      recipientDisplayName: data.recipient_display_name || null, // display name of the user the subscription was gifted to\r\n      multiMonthDuration: data.multi_month_duration || null, // number of months the subscription was for\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Whisper event handler\r\n   * @param data The data object\r\n   * @private\r\n   */\r\n  _onWhisperEvent(data: any) {\r\n    this._emit(data.type, data.data);\r\n  }\r\n\r\n  /**\r\n   * Channel points event handler\r\n   * @param data The data object\r\n   * @private\r\n   */\r\n  _onChannelPointsEvent({ type, data }: { type: string; data: any }) {\r\n    switch (type) {\r\n      case \"reward-redeemed\":\r\n        this._emit(\"reward\", data.redemption);\r\n        this._emit(type, data.redemption);\r\n        break;\r\n      default:\r\n        this._emit(type, data);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /** Add topics to the topics array\r\n   * @param topics Topics to add\r\n   * @private\r\n   * @example\r\n   * pubsub._addTopics([\"topic1\", \"topic2\"]);\r\n   * pubsub._addTopics([\"topic3\", \"topic4\"]);\r\n   * console.log(pubsub.registeredTopics()); // [\"topic1\", \"topic2\", \"topic3\", \"topic4\"]\r\n   */\r\n  _addTopics(topics: string[]) {\r\n    if (!Array.isArray(topics)) {\r\n      topics = [topics];\r\n    }\r\n    topics.forEach((topic) => {\r\n      if (!this._options.topics.includes(topic))\r\n        this._options.topics.push(topic);\r\n    });\r\n    return this._options.topics;\r\n  }\r\n\r\n  /** Remove topics from the list of topics to listen to\r\n   * @param topics Topics to remove\r\n   * @private\r\n   * @example\r\n   * pubsub._addTopics([\"topic1\", \"topic2\", \"topic3\", \"topic4\"]);\r\n   * pubsub._removeTopics([\"topic2\", \"topic3\"]);\r\n   * console.log(pubsub.registeredTopics()); // [\"topic1\", \"topic4\"]\r\n   */\r\n  _removeTopics(topics: string[]) {\r\n    if (!Array.isArray(topics)) {\r\n      topics = [topics];\r\n    }\r\n    this._options.topics = this._options.topics.filter(\r\n      (topic) => !topics.includes(topic)\r\n    );\r\n    return this._options.topics;\r\n  }\r\n\r\n  /**\r\n   * Check if an topic is valid\r\n   * @param topic Topic to check\r\n   * @private\r\n   * @returns True if topic is valid, false otherwise\r\n   * @example\r\n   * console.log(pubsub._isValidTopic('channel-bits-events-v2')); // true\r\n   * console.log(pubsub._isValidTopic('channel-bits-events-v3')); // false\r\n   */\r\n  _isValidTopic(topic: string) {\r\n    try {\r\n      const availableTopics = [\r\n        \"channel-bits-events-v1\",\r\n        \"channel-bits-events-v2\",\r\n        \"channel-bits-badge-unlocks\",\r\n        \"channel-points-channel-v1\",\r\n        \"channel-subscribe-events-v1\",\r\n        \"chat-moderator-actions\",\r\n        \"automod-queue\",\r\n        \"user-moderation-notifications\",\r\n        \"whispers\",\r\n      ];\r\n      if (typeof topic !== \"string\") {\r\n        throw new Error(\"Invalid topic\");\r\n      }\r\n      if (topic.length > 100) {\r\n        throw new Error(\"Topic is too long\");\r\n      }\r\n      return availableTopics.some((availableTopic) =>\r\n        topic.toLowerCase().includes(availableTopic)\r\n      );\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emit an event\r\n   * @param eventName Event to emit\r\n   * @param args Data to emit\r\n   * @private\r\n   * @returns This instance\r\n   */\r\n  _emit(eventName: string, ...args: any[]) {\r\n    eventName = utils.slug(eventName);\r\n    if (this._events.hasOwnProperty(eventName)) {\r\n      this._events[eventName].forEach((callback: Function) => {\r\n        callback(...args);\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Add a listener to an event\r\n   * @param eventName Event to listen to\r\n   * @param callback Callback to call when the event is emitted\r\n   * @returns This instance\r\n   * @example\r\n   * pubsub.on(\"message\", (data) => {\r\n   *  console.log(data);\r\n   * });\r\n   */\r\n  on(eventName: string, callback: Function) {\r\n    eventName = utils.slug(eventName);\r\n    if (eventName === \"\") {\r\n      throw new Error(\"Invalid event name\");\r\n    }\r\n    if (typeof callback !== \"function\") {\r\n      throw new Error(\"Invalid callback\");\r\n    }\r\n    if (!this._events.hasOwnProperty(eventName)) {\r\n      this._events[eventName] = [];\r\n    }\r\n    this._events[eventName].push(callback);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Remove a listener from an event\r\n   * @param eventName Event to remove listener from\r\n   * @param callback Callback to remove\r\n   * @returns This instance or false if the callback was not found\r\n   * @example\r\n   * pubsub.off(\"message\", (data) => {\r\n   *  console.log(data);\r\n   * });\r\n   */\r\n  off(eventName: string, callback: Function) {\r\n    eventName = utils.slug(eventName);\r\n    if (eventName === \"\") {\r\n      throw new Error(\"Invalid event name\");\r\n    }\r\n    if (typeof callback !== \"function\") {\r\n      throw new Error(\"Invalid callback\");\r\n    }\r\n    if (this._events.hasOwnProperty(eventName)) {\r\n      const index = this._events[eventName].indexOf(callback);\r\n      if (index > -1) {\r\n        this._events[eventName].splice(index, 1);\r\n        return this;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Connect to the pubsub websocket (if not already connected) if autoConnect option is disabled\r\n   * @returns This instance (for chaining) or throws an error if autoConnect is enabled\r\n   * @example\r\n   * pubsub.connect().then(() => {\r\n   *  console.log(\"Connected!\");\r\n   * });\r\n   */\r\n  connect() {\r\n    if (this._options.autoConnect) {\r\n      throw new Error(\"autoConnect is enabled\");\r\n    }\r\n    if (this.state() !== \"open\") {\r\n      return this._connect();\r\n    } else {\r\n      return Promise.resolve(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reconnect to pubsub websocket if autoReconnect option is disabled\r\n   * @returns This instance (for chaining) or throws an error if autoReconnect is enabled\r\n   * @example\r\n   * pubsub.reconnect().then(() => {\r\n   *  console.log(\"Reconnected!\");\r\n   * });\r\n   */\r\n  reconnect() {\r\n    if (this._options.autoReconnect) {\r\n      throw new Error(\"autoReconnect is enabled\");\r\n    } else {\r\n      return this._reconnect();\r\n    }\r\n  }\r\n\r\n  /** Disconnect from the pubsub websocket\r\n   * @returns This instance (for chaining)\r\n   * @example\r\n   * pubsub.disconnect().then(() => {\r\n   *  console.log(\"Disconnected!\");\r\n   * });\r\n   */\r\n  disconnect() {\r\n    return this._disconnect();\r\n  }\r\n\r\n  /** Get the last latency measurement\r\n   * @returns Latency in milliseconds\r\n   * @example\r\n   * console.log(pubsub.lastLatency());\r\n   * // => 1234\r\n   */\r\n  lastLatency() {\r\n    return this._latency;\r\n  }\r\n\r\n  /**\r\n   * Subscribe to a topic or topics (if an array is provided)\r\n   * @param topics Topics to subscribe to\r\n   * @returns This instance (for chaining)\r\n   * @example\r\n   * pubsub.subscribe(\"test\").then(() => {\r\n   *  console.log(\"Subscribed!\");\r\n   * });\r\n   */\r\n  subscribe(topics: string[]) {\r\n    return this._subscribe(topics);\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from a topic or topics (if an array is provided)\r\n   * @param topics Topics to unsubscribe from (if omitted, all topics are unsubscribed)\r\n   * @returns This instance (for chaining)\r\n   * @example\r\n   * pubsub.unsubscribe(\"test\").then(() => {\r\n   *  console.log(\"Unsubscribed!\");\r\n   * });\r\n   */\r\n  unsubscribe(topics: string[]) {\r\n    return this._unsubscribe(topics);\r\n  }\r\n\r\n  /**\r\n   * Get all topics registered\r\n   * @returns Array of topics\r\n   */\r\n  registeredTopics() {\r\n    return this._options.topics || [];\r\n  }\r\n\r\n  /**\r\n   * Get the number of topics registered\r\n   */\r\n  registeredTopicsCount() {\r\n    return this.registeredTopics().length;\r\n  }\r\n\r\n  /**\r\n   * Check if a topic is registered\r\n   * @param topic Topic to check\r\n   * @returns\r\n   */\r\n  isRegisteredTopic(topic: string) {\r\n    return this.registeredTopics().includes(topic);\r\n  }\r\n\r\n  /**\r\n   * Connection status of the pubsub websocket\r\n   * @returns Connection state (open, closed, connecting, or disconnected)\r\n   * @example\r\n   * if (pubsub.state() === \"open\") {\r\n   *  console.log(\"Connected!\");\r\n   * }\r\n   */\r\n  state() {\r\n    const { readyState } = this._client || {};\r\n    switch (readyState) {\r\n      case WebSocket.CONNECTING:\r\n        return \"connecting\";\r\n      case WebSocket.OPEN:\r\n        return \"open\";\r\n      case WebSocket.CLOSING:\r\n        return \"closing\";\r\n      case WebSocket.CLOSED:\r\n      default:\r\n        return \"closed\";\r\n    }\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    AnotherTwitchPubSub: typeof AnotherTwitchPubSub;\r\n  }\r\n}\r\n\r\nwindow.AnotherTwitchPubSub = AnotherTwitchPubSub;\r\n"],"names":[],"sourceRoot":""}