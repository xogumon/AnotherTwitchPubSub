{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://anothertwitchpubsub/webpack/bootstrap","webpack://anothertwitchpubsub/webpack/runtime/global","webpack://anothertwitchpubsub/./src/modules/EventEmitter.ts","webpack://anothertwitchpubsub/./src/modules/WebSocket.ts","webpack://anothertwitchpubsub/./src/modules/Client.ts","webpack://anothertwitchpubsub/./src/modules/Options.ts","webpack://anothertwitchpubsub/./src/modules/Utils.ts","webpack://anothertwitchpubsub/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","/**\r\n * EventEmitter\r\n */\r\nexport default class EventEmitter {\r\n  private events: { [event: string]: Function[] } = {};\r\n  /**\r\n   * Emit an event\r\n   * @param event Event to emit\r\n   * @param data Data to emit\r\n   * @returns Returns a promise with a number of emitted events\r\n   * @example\r\n   * emitter.emit('event', 'data');\r\n   */\r\n  public async emit(event: string | string[], ...data: any[]) {\r\n    let count: number = 0;\r\n    await new Promise(async (resolve) => {\r\n      if (Array.isArray(event)) {\r\n        await Promise.all(\r\n          event.map(async (e: string) => {\r\n            await this.emit(e, ...data).then(() => {\r\n              count++;\r\n            });\r\n          })\r\n        );\r\n      } else if (event === \"*\") {\r\n        for (const key in this.events) {\r\n          if (this.events.hasOwnProperty(key)) {\r\n            this.events[key].forEach((listener) => {\r\n              count++;\r\n              listener(...data);\r\n            });\r\n          }\r\n        }\r\n      } else if (typeof event === \"string\" && event.includes(\"*\")) {\r\n        const [eventName, ...rest] = event.split(\"*\");\r\n        for (const key in this.events) {\r\n          if (this.events.hasOwnProperty(key) && key.startsWith(eventName)) {\r\n            this.events[key].forEach((listener) => {\r\n              count++;\r\n              listener(...data);\r\n            });\r\n          }\r\n        }\r\n      } else if (\r\n        typeof event === \"string\" &&\r\n        event.toLowerCase() in this.events\r\n      ) {\r\n        this.events[event.toLowerCase()].forEach((listener) => {\r\n          count++;\r\n          listener(...data);\r\n        });\r\n      }\r\n      resolve(count);\r\n    });\r\n    return `Emitted ${count} events to listeners`;\r\n  }\r\n  /**\r\n   * Listen to an event\r\n   * @param event Event to listen to\r\n   * @param callback Callback to execute when the event is emitted\r\n   * @example\r\n   * emitter.on('event', (data) => {\r\n   *   console.log(data);\r\n   * });\r\n   * emitter.emit('event', 'data'); // Outputs 'data'\r\n   */\r\n  public on(event: string | string[], callback: Function) {\r\n    if (Array.isArray(event)) {\r\n      event.map((e: string) => {\r\n        this.on(e, callback);\r\n      });\r\n    } else if (typeof event === \"string\") {\r\n      if (!this.events[event]) {\r\n        this.events[event] = [];\r\n      }\r\n      this.events[event].push(callback);\r\n    }\r\n  }\r\n  /**\r\n   * Remove an event listener\r\n   * @param event Event to remove listener from\r\n   * @param callback Callback to remove\r\n   * @example\r\n   * const callback = (data) => {\r\n   *   console.log(data);\r\n   * };\r\n   * emitter.on('event', callback);\r\n   * emitter.emit('event', 'data'); // Outputs 'data'\r\n   * emitter.removeListener('event', callback);\r\n   * emitter.emit('event', 'data'); // Doesn't output 'data'\r\n   */\r\n  public removeListener(event: string, callback: Function) {\r\n    if (this.events[event]) {\r\n      this.events[event] = this.events[event].filter(\r\n        (cb: Function) => cb !== callback\r\n      );\r\n    }\r\n  }\r\n  /**\r\n   * Remove all event listeners for an event\r\n   * @param event Event to remove listeners from\r\n   * @example\r\n   * emitter.on('event', (data) => {\r\n   *   console.log(data);\r\n   * });\r\n   * emitter.emit('event', 'data'); // Outputs 'data'\r\n   * emitter.removeAllListeners('event');\r\n   * emitter.emit('event', 'data'); // Doesn't output 'data'\r\n   */\r\n  public removeAllListeners(event: string) {\r\n    if (this.events[event]) {\r\n      this.events[event] = [];\r\n    }\r\n  }\r\n  /**\r\n   * Once an event is emitted, remove all event listeners for that event\r\n   * @param event Event to remove listeners from\r\n   * @example\r\n   * emitter.once('event', (data) => {\r\n   *   console.log(data);\r\n   * });\r\n   * emitter.emit('event', 'data'); // Outputs 'data'\r\n   * emitter.emit('event', 'data'); // Doesn't output 'data'\r\n   */\r\n  public once(event: string, callback: Function) {\r\n    this.on(event, (data: any) => {\r\n      this.removeListener(event, callback);\r\n      callback(data);\r\n    });\r\n  }\r\n}\r\n","let ws:\r\n  | typeof WebSocket\r\n  | typeof global.WebSocket\r\n  | typeof window.WebSocket\r\n  | typeof self.WebSocket =\r\n  WebSocket || global.WebSocket || window.WebSocket || self.WebSocket;\r\n\r\nif (!ws) {\r\n  throw new Error(\"WebSocket is not supported by this browser.\");\r\n}\r\n\r\nexport default ws;\r\n","/**\r\n * Client\r\n */\r\nimport EventEmitter from \"./EventEmitter\";\r\nimport WebSocket from \"./WebSocket\";\r\nexport default class Client extends EventEmitter {\r\n  private client: WebSocket;\r\n  private heartbeatInterval: any;\r\n  private heartbeatIntervalMs: number = 6e4; // 60 seconds\r\n  /**\r\n   * Connect to the websocket\r\n   * @returns A promise with the websocket connection\r\n   */\r\n  public async connect() {\r\n    await new Promise((resolve, reject) => {\r\n      this.client = new WebSocket(\"wss://pubsub-edge.twitch.tv\");\r\n      this.client.onopen = (data: Event) => {\r\n        this.emit(\"connected\", data);\r\n        this.heartbeatInterval = setInterval(\r\n          () => this.heartbeat(),\r\n          this.heartbeatIntervalMs\r\n        );\r\n        resolve(data);\r\n      };\r\n      this.client.onclose = (event: CloseEvent) => {\r\n        const data = {\r\n          code: event.code,\r\n          reason: event.reason,\r\n          message: null,\r\n          wasClean: event.wasClean,\r\n        };\r\n        switch (event.code) {\r\n          case 1000:\r\n            data.message = \"Normal closure\";\r\n            break;\r\n          case 1001:\r\n            data.message = \"Going away\";\r\n            break;\r\n          case 1002:\r\n            data.message = \"Protocol error\";\r\n            break;\r\n          case 1003:\r\n            data.message = \"Unsupported data\";\r\n            break;\r\n          case 1006:\r\n            data.message = \"Abnormal closure\";\r\n            break;\r\n          case 1007:\r\n            data.message = \"Invalid data\";\r\n            break;\r\n          case 1008:\r\n            data.message = \"Policy violation\";\r\n            break;\r\n          case 1009:\r\n            data.message = \"data.Message too big\";\r\n            break;\r\n          case 1010:\r\n            data.message = \"Mandatory extension\";\r\n            break;\r\n          case 1011:\r\n            data.message = \"Internal server error\";\r\n            break;\r\n          default:\r\n            data.message = \"Unknown error\";\r\n            break;\r\n        }\r\n        this.emit(\"disconnected\", data);\r\n        clearInterval(this.heartbeatInterval);\r\n        reject(new Error(data.message));\r\n      };\r\n      this.client.onerror = (error: Event) => {\r\n        this.emit(\"error\", error);\r\n        reject(error);\r\n      };\r\n      this.client.onmessage = (data: MessageEvent) => {\r\n        this.emit(\"raw\", data);\r\n        const message = JSON.parse(data.data);\r\n        switch (message.type) {\r\n          case \"PONG\":\r\n            this.emit(\"pong\", Date.now());\r\n            break;\r\n          case \"MESSAGE\":\r\n            this.emit(\"message\", message);\r\n            break;\r\n          case \"RESPONSE\":\r\n            if (message.error) {\r\n              this.emit(`error:${message.nonce}`, message);\r\n            } else {\r\n              this.emit(`response:${message.nonce}`, message);\r\n            }\r\n            this.emit(\"response\", message);\r\n            break;\r\n          case \"DISCONNECT\":\r\n            this.emit(\"disconnect\", message);\r\n            break;\r\n          case \"RECONNECT\":\r\n            this.emit(\"reconnect\", message);\r\n            break;\r\n          default:\r\n            this.emit(\"unknown\", message);\r\n            break;\r\n        }\r\n      };\r\n    });\r\n    return this.client;\r\n  }\r\n  /**\r\n   * Disconnect from the websocket\r\n   */\r\n  public disconnect() {\r\n    this.client.close();\r\n  }\r\n  /**\r\n   * Send a message to the websocket\r\n   * @param data Data to send to the websocket\r\n   */\r\n  public async send(data: any) {\r\n    this.client.send(JSON.stringify(data));\r\n    if (data.nonce) {\r\n      return await this.waitForResponse(data.nonce);\r\n    }\r\n  }\r\n  /**\r\n   * Wait for a response to a message\r\n   */\r\n  private async waitForResponse(nonce: string) {\r\n    return new Promise((resolve, reject) => {\r\n      this.once(`response:${nonce}`, (response: any) => {\r\n        resolve(response);\r\n      });\r\n      this.once(`error:${nonce}`, (error: any) => {\r\n        reject(error);\r\n      });\r\n      this.once(`timeout:${nonce}`, () => {\r\n        reject(new Error(\"Timeout\"));\r\n      });\r\n\r\n      setTimeout(() => {\r\n        this.emit(`timeout:${nonce}`);\r\n      }, 1000);\r\n    })\r\n      .then((response: any) => {\r\n        this.removeAllListeners(`response:${nonce}`);\r\n        this.removeAllListeners(`error:${nonce}`);\r\n        this.removeAllListeners(`timeout:${nonce}`);\r\n        return response;\r\n      })\r\n      .catch((error: any) => {\r\n        this.removeAllListeners(`response:${nonce}`);\r\n        this.removeAllListeners(`error:${nonce}`);\r\n        this.removeAllListeners(`timeout:${nonce}`);\r\n        throw error;\r\n      });\r\n  }\r\n  /**\r\n   * Heartbeat\r\n   */\r\n  private heartbeat() {\r\n    this.emit(\"ping\", Date.now());\r\n    this.send({\r\n      type: \"PING\",\r\n    });\r\n  }\r\n  /**\r\n   * State of the websocket\r\n   */\r\n  public state() {\r\n    switch (this.client?.readyState) {\r\n      case WebSocket.CONNECTING:\r\n        return \"CONNECTING\";\r\n      case WebSocket.OPEN:\r\n        return \"CONNECTED\";\r\n      case WebSocket.CLOSING:\r\n        return \"DISCONNECTING\";\r\n      case WebSocket.CLOSED:\r\n      default:\r\n        return \"DISCONNECTED\";\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Options\r\n */\r\nexport interface thisOptions {\r\n  /**\r\n   * Options\r\n   */\r\n  accessToken: string;\r\n  topics: string[];\r\n  autoConnect: boolean;\r\n  autoReconnect: boolean;\r\n  reconnectInterval: number;\r\n  reconnectAttempts: number;\r\n}\r\nclass AnotherTwitchPubSubOptions {\r\n  /**\r\n   * Store the options.\r\n   */\r\n  private options: thisOptions = {\r\n    accessToken: \"\",\r\n    topics: [],\r\n    autoConnect: true,\r\n    autoReconnect: true,\r\n    reconnectInterval: 10000,\r\n    reconnectAttempts: 10,\r\n  };\r\n\r\n  /**\r\n   * Set the options.\r\n   */\r\n  public set(options: thisOptions) {\r\n    this.options = Object.assign({}, this.options, options);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get the options.\r\n   */\r\n  public get() {\r\n    return this.options;\r\n  }\r\n\r\n  /**\r\n   * Set the access token.\r\n   * @param accessToken The access token to use.\r\n   * @returns This instance.\r\n   */\r\n  public setToken(accessToken: string) {\r\n    this.options.accessToken = accessToken;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the topics to subscribe to.\r\n   * @param topics The topics to subscribe to.\r\n   * @returns This instance.\r\n   */\r\n  public setTopics(topics: string[]) {\r\n    this.options.topics = topics;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Find a topic in the topics.\r\n   * @param topic The topic to find.\r\n   */\r\n  public findTopic(topic: string) {\r\n    return this.options.topics.indexOf(topic) > -1;\r\n  }\r\n\r\n  /**\r\n   * Add a topic to the topics.\r\n   * @param topic The topic to add.\r\n   */\r\n  public addTopic(topic: string) {\r\n    if (!this.options.topics.includes(topic)) {\r\n      this.options.topics.push(topic);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Remove a topic from the topics.\r\n   * @param topic The topic to remove.\r\n   */\r\n  public removeTopic(topic: string) {\r\n    const index = this.options.topics.indexOf(topic);\r\n    if (index > -1) {\r\n      this.options.topics.splice(index, 1);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Add topics to the topics.\r\n   * @param topics The topics to add.\r\n   */\r\n  public addTopics(topics: string[]) {\r\n    if (!Array.isArray(topics)) {\r\n      this.addTopic(topics);\r\n    } else {\r\n      for (const topic of topics) {\r\n        this.addTopic(topic);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Remove topics from the topics.\r\n   * @param topics The topics to remove.\r\n   */\r\n  public removeTopics(topics: string[]) {\r\n    if (!Array.isArray(topics)) {\r\n      this.removeTopic(topics);\r\n    } else {\r\n      for (const topic of topics) {\r\n        this.removeTopic(topic);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n}\r\nexport default new AnotherTwitchPubSubOptions();\r\n","import Options from \"./Options\";\r\nexport default {\r\n  /**\r\n   * isEmpty\r\n   * @param obj Object to check\r\n   * @returns True if the object is empty, false otherwise\r\n   */\r\n  isEmpty(obj: any) {\r\n    if (\r\n      obj === \"\" ||\r\n      obj === 0 ||\r\n      obj === false ||\r\n      obj === null ||\r\n      obj === undefined\r\n    ) {\r\n      return true;\r\n    }\r\n    if (Array.isArray(obj)) {\r\n      return obj.length === 0;\r\n    } else if (typeof obj === \"object\") {\r\n      return Object.keys(obj).length === 0;\r\n    }\r\n    return false;\r\n  },\r\n  /**\r\n   * Lowercase a array items\r\n   * @param arr Array to lowercase\r\n   * @returns Array with all items lowercased\r\n   * @example\r\n   * const arr = ['THIS', 'IS', 'A', 'TEST'];\r\n   * const lowercased = arrayLowerCase(arr);\r\n   * console.log(lowercased); // ['this', 'is', 'a', 'test']\r\n   */\r\n  arrayLowerCase(arr: any[]) {\r\n    return arr.map((item) => item.toLowerCase());\r\n  },\r\n  /**\r\n   * Repeat a method a number of times\r\n   * @param fn Method to repeat\r\n   * @param times Number of times to repeat\r\n   * @returns Array with the repeated method\r\n   * @example\r\n   * const repeat = repeat(() => 1, 5);\r\n   * console.log(repeat); // [1, 1, 1, 1, 1]\r\n   */\r\n  repeat(fn: Function, times: number) {\r\n    let result = [];\r\n    for (let i = 0; i < times; i++) {\r\n      result.push(fn());\r\n    }\r\n    return result;\r\n  },\r\n  /**\r\n   * Generate a random nonce\r\n   * @returns Random nonce\r\n   */\r\n  nonce() {\r\n    const random = () => Math.random().toString(36).substring(2, 15);\r\n    return this.repeat(random, 2).join(\"\");\r\n  },\r\n  /**\r\n   * Convert a string to a camelCase string\r\n   */\r\n  toCamelCase(str: string) {\r\n    return str.replace(/\\s(.)/g, ($1) => $1.toUpperCase());\r\n  },\r\n  /**\r\n   * Slugify a string\r\n   * @param str String to slugify\r\n   * @param sep Separator to use\r\n   * @returns Slugified string\r\n   * @example\r\n   * const slug = slug(\"This is a string\", \"-\");\r\n   * console.log(slug); // this-is-a-string\r\n   */\r\n  slug(str: string, sep: string = \"-\") {\r\n    if (typeof str !== \"string\") return \"\";\r\n    if (typeof sep !== \"string\") sep = \"-\";\r\n    str = str.toLowerCase().replace(/[^a-z0-9]/g, sep); // replace all non-alphanumeric characters with the separator\r\n    if (sep.length > 0) {\r\n      str = str\r\n        .replace(new RegExp(`${sep}{2,}`, \"g\"), sep) // replace multiple separators with a single one\r\n        .replace(new RegExp(`^${sep}|${sep}$`, \"g\"), \"\"); // remove leading and trailing separators\r\n    }\r\n    return str; // return the slug\r\n  },\r\n  /**\r\n   * Slugify to camelCase string\r\n   * @param str String to slugify\r\n   * @returns Slugified string in camelCase without separators\r\n   * @example\r\n   * const slug = slugToCamelCase(\"This is a string\");\r\n   * console.log(slug); // thisIsAString\r\n   */\r\n  slugToCamelCase(str: string) {\r\n    return this.slug(str)\r\n      .replace(/-([a-z])/g, ($1: string) => $1.toUpperCase())\r\n      .replace(/-/g, \"\");\r\n  },\r\n  /**\r\n   * Remove duplicate values from an array\r\n   * @param arr Array to remove duplicates from\r\n   * @returns Array with no duplicates\r\n   * @example\r\n   * const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n   * const unique = removeDuplicates(arr);\r\n   * console.log(unique); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n   */\r\n  removeDuplicates(arr: any[]) {\r\n    return arr.filter((item, index) => arr.indexOf(item) === index);\r\n  },\r\n  /**\r\n   * Validate a token with Twitch's API\r\n   * @returns Validation result from Twitch's API\r\n   */\r\n  async validateToken() {\r\n    const res = await fetch(\"https://id.twitch.tv/oauth2/validate\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `OAuth ${Options.get().accessToken}`,\r\n      },\r\n    });\r\n    return await res.json();\r\n  },\r\n  /**\r\n   * Get user data from Twitch's API\r\n   * @param user User to get the ID of\r\n   * @returns Array containing the user's ID\r\n   * @example\r\n   * const user = \"twitch\";\r\n   * const token = \"oauth:token\";\r\n   * const id = await getUserId(user, token);\r\n   * console.log(id); // [1234]\r\n   */\r\n  async getUserId(user: any) {\r\n    let find: string;\r\n    if (typeof user === \"string\") {\r\n      find = `login=${user}`;\r\n    } else if (typeof user === \"object\") {\r\n      find = user.map((name: string) => `login=${name}`).join(\"&\");\r\n    } else {\r\n      throw new Error(\"User must be a string or an array of strings\");\r\n    }\r\n    try {\r\n      const api = await this.validateToken();\r\n      if (api.client_id) {\r\n        if (api.login === user.toLowerCase()) {\r\n          return [api.user_id];\r\n        } else {\r\n          const res = await fetch(`https://api.twitch.tv/helix/users?${find}`, {\r\n            headers: {\r\n              \"Client-ID\": api.client_id,\r\n              Authorization: `Bearer ${Options.get().accessToken}`,\r\n            },\r\n          });\r\n          const data = await res.json();\r\n          if (data.data.length > 0) {\r\n            return data.data.map((user: any) => user.id);\r\n          } else {\r\n            throw new Error(\"User not found\");\r\n          }\r\n        }\r\n      } else {\r\n        throw new Error(\"Invalid token\");\r\n      }\r\n    } catch (err) {\r\n      return console.log(err);\r\n    }\r\n  },\r\n  /**\r\n   * Returns if string is a number or not\r\n   */\r\n  isNumber(str: string) {\r\n    return !isNaN(Number(str));\r\n  },\r\n\r\n  /**\r\n   * Check if an topic is valid\r\n   * @param topic Topic to check\r\n   * @returns True if topic is valid, false otherwise\r\n   * @example\r\n   * console.log(isValidTopic('channel-bits-events-v2')); // true\r\n   * console.log(isValidTopic('channel-bits-events-v3')); // false\r\n   */\r\n  isValidTopic(topic: string) {\r\n    try {\r\n      if (typeof topic !== \"string\") {\r\n        throw new Error(\"Invalid topic\");\r\n      }\r\n      if (topic.length > 100) {\r\n        throw new Error(\"Topic is too long\");\r\n      }\r\n      if (topic.length < 5) {\r\n        throw new Error(\"Topic is too short\");\r\n      }\r\n      if (topic.includes(\" \")) {\r\n        throw new Error(\"Topic cannot contain spaces\");\r\n      }\r\n      if (!this.getTopicsFormat(topic)) {\r\n        throw new Error(\"Topic is invalid\");\r\n      }\r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  },\r\n  /**\r\n   * Returns a correct format of a topic\r\n   * @param topicName Topic to format\r\n   * @returns Formatted topic\r\n   */\r\n  getTopicsFormat(topicName: string) {\r\n    topicName = this.slugToCamelCase(topicName);\r\n    const validTopics = {\r\n      channelBitsEventsV1: \"channel-bits-events-v2.$arg1$\",\r\n      channelBitsEventsV2: \"channel-bits-events-v2.$arg1$\",\r\n      channelBitsBadgeUnlocks: \"channel-bits-badge-unlocks.$arg1$\",\r\n      channelPointsChannelV1: \"channel-points-channel-v1.$arg1$\",\r\n      channelSubscribeEventsV1: \"channel-subscribe-events-v2.$arg1$\",\r\n      chatModeratorActions: \"chat_moderator_actions.$arg1$.$arg2$\",\r\n      automodQueue: \"automod-queue.$arg1$.$arg2$\",\r\n      userModerationNotifications:\r\n        \"user-moderation-notifications.$arg1$.$arg2$\",\r\n      whispers: \"whispers.$arg1$\",\r\n    };\r\n    return validTopics[topicName];\r\n  },\r\n  /**\r\n   * Filter an array of topics\r\n   * @param topics Array of topics to filter\r\n   * @returns Array of valid topics\r\n   */\r\n  filterTopics(topics: string[]) {\r\n    topics = this.arrayLowerCase(topics);\r\n    topics = this.removeDuplicates(topics);\r\n    return topics.filter((topic: string) => this.isValidTopic(topic));\r\n  },\r\n  /**\r\n   * Parse a topic to get the arguments\r\n   * @param topic Topic to parse\r\n   * @returns Array of arguments\r\n   */\r\n  async parseTopic(topic: string) {\r\n    let [topicName, arg1, arg2] = topic.split(\".\");\r\n    const topicFormat = this.getTopicsFormat(topicName);\r\n    if (topicFormat) {\r\n      if (arg1 || arg2) {\r\n        if (!this.isNumber(arg1) && !this.isNumber(arg2)) {\r\n          [arg1, arg2] = await this.getUserId([arg1, arg2]);\r\n        } else if (!this.isNumber(arg1)) {\r\n          [arg1] = await this.getUserId(arg1);\r\n        } else if (!this.isNumber(arg2)) {\r\n          [arg2] = await this.getUserId(arg2);\r\n        }\r\n      } else {\r\n        const validade = await this.validateToken();\r\n        if (validade.login) {\r\n          arg1 = validade.user_id;\r\n          arg2 = validade.user_id;\r\n        } else {\r\n          throw new Error(\"Invalid token\");\r\n        }\r\n      }\r\n      if (this.isNumber(arg1) && this.isNumber(arg2)) {\r\n        return topicFormat.replace(\"$arg1$\", arg1).replace(\"$arg2$\", arg2);\r\n      } else {\r\n        return topicFormat.replace(\"$arg1$\", arg1);\r\n      }\r\n    }\r\n    return null;\r\n  },\r\n  /**\r\n   * Parse array of topics to get the arguments\r\n   * @param topics Array of topics to parse\r\n   * @returns Array of arguments\r\n   */\r\n  async parseTopics(topics: string[]) {\r\n    this.filterTopics(topics);\r\n    return await Promise.all(\r\n      topics.map((topic: string) => this.parseTopic(topic))\r\n    );\r\n  },\r\n};\r\n","import Client from \"./modules/Client\";\r\nimport EventEmitter from \"./modules/EventEmitter\";\r\nimport Options from \"./modules/Options\";\r\nimport Utils from \"./modules/Utils\";\r\nconst PubSub = new Client();\r\nconst Emitter = new EventEmitter();\r\n/**\r\n * @class AnotherTwitchPubSub\r\n * @author Ronis Xogum <ronis@xogum.net> (https://github.com/xogumon)\r\n * @version 1.0.0\r\n * @description A simple Twitch PubSub client\r\n * @license MIT\r\n * @param {string} accessToken - The authentication token of the channel you want to subscribe to.\r\n * @param {boolean} autoConnect - Whether or not to automatically connect to Twitch PubSub.\r\n * @param {boolean} autoReconnect - Whether or not to automatically reconnect to Twitch PubSub if the connection is lost.\r\n * @param {number} reconnectAttempts - The number of reconnect attempts to make before giving up.\r\n * @param {number} reconnectInterval - The time in milliseconds between reconnect attempts.\r\n * @param {string[]} topics - The topics you want to subscribe to.\r\n * @example\r\n * new TwitchPubSub({\r\n *  accessToken: 'authToken',\r\n *  topics: ['topic1', 'topic2']\r\n * }).on('message', (topic, message) => {\r\n *  console.log(topic, message);\r\n * });\r\n */\r\nclass AnotherTwitchPubSub {\r\n  private __latency: number = 0;\r\n  private __timestamp: number = 0;\r\n  constructor(options: any) {\r\n    Options.set(options);\r\n    if (Options.get().autoConnect) this.__connect();\r\n    PubSub.on(\"connected\", () => this.__onConnection());\r\n    PubSub.on(\"disconnected\", (event: any) => this.__onDisconnection(event));\r\n    PubSub.on(\"error\", (event: any) => this.__onEventError(event));\r\n    PubSub.on(\"message\", (event: any) => this.__onEventMessage(event));\r\n    PubSub.on(\"ping\", (event: any) => this.__onPingSent(event));\r\n    PubSub.on(\"pong\", (event: any) => this.__onPongReceived(event));\r\n    PubSub.on(\"raw\", (event: any) => this.__onRawMessage(event));\r\n    PubSub.on(\"response\", (event: any) => this.__onResponseMessage(event));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Connect to the pubsub websocket\r\n   * @returns This instance (for chaining)\r\n   * @example\r\n   * pubsub.__connect().then(() => {\r\n   *  console.log(\"Connected!\");\r\n   * });\r\n   */\r\n  private async __connect() {\r\n    await new Promise((resolve, reject) => {\r\n      if (PubSub.state() === \"DISCONNECTED\") {\r\n        PubSub.connect()\r\n          .then(() => {\r\n            resolve(null);\r\n          })\r\n          .catch((e: any) => {\r\n            reject(e);\r\n          });\r\n      } else {\r\n        resolve(null);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Disconnect from the pubsub websocket\r\n   * @returns This instance (for chaining)\r\n   * @example\r\n   * pubsub.__disconnect().then(() => {\r\n   *  console.log(\"Disconnected!\");\r\n   * });\r\n   */\r\n  private async __disconnect() {\r\n    await new Promise((resolve) => {\r\n      if (PubSub.state() === \"CONNECTED\") {\r\n        PubSub.disconnect();\r\n      } else if (PubSub.state() === \"DISCONNECTED\") {\r\n        resolve(null);\r\n      }\r\n      PubSub.on(\"disconnected\", () => {\r\n        resolve(null);\r\n      });\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** Reconnect to the pubsub websocket\r\n   * @returns This instance (for chaining)\r\n   * @example\r\n   * pubsub.reconnect().then(() => {\r\n   *  console.log(\"Reconnected!\");\r\n   * });\r\n   */\r\n  private async __reconnect(attempts: number = 0) {\r\n    await new Promise((resolve, reject) => {\r\n      function connect() {\r\n        setTimeout(() => {\r\n          PubSub.connect()\r\n            .then(() => {\r\n              resolve(null);\r\n            })\r\n            .catch((e: any) => {\r\n              setTimeout(() => {\r\n                this.__reconnect(attempts + 1);\r\n              }, Options.get().reconnectInterval);\r\n              reject(e);\r\n            });\r\n        }, Options.get().reconnectInterval);\r\n      }\r\n      if (PubSub.state() === \"CONNECTING\") {\r\n        reject(new Error(\"Already reconnecting\"));\r\n      }\r\n      if (attempts >= Options.get().reconnectAttempts) {\r\n        reject(new Error(\"Reconnect attempts exceeded\"));\r\n      }\r\n      if (PubSub.state() === \"DISCONNECTED\") {\r\n        connect();\r\n      }\r\n      if (PubSub.state() === \"CONNECTED\") {\r\n        if (attempts === 0) {\r\n          PubSub.disconnect();\r\n          PubSub.on(\"disconnected\", () => {\r\n            connect();\r\n          });\r\n        }\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Send a message to the pubsub websocket\r\n   * @param data Data to send\r\n   * @returns This instance (for chaining)\r\n   * @example\r\n   * pubsub.__send({\r\n   *  type: \"PING\"\r\n   * }).then(() => {\r\n   *  console.log(\"Message sent!\");\r\n   * });\r\n   */\r\n  private async __send(data: object) {\r\n    if (PubSub.state() === \"CONNECTED\") {\r\n      return await PubSub.send(data);\r\n    } else {\r\n      throw new Error(\"Not connected\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Subscribe to a topic or topics (if an array is provided)\r\n   * @param topics Topics to subscribe to\r\n   * @returns This instance (for chaining)\r\n   * @example\r\n   * pubsub.__subscribe(\"test\").then(() => {\r\n   *  console.log(\"Subscribed!\");\r\n   * });\r\n   */\r\n  private async __subscribe(topics: string[]) {\r\n    await new Promise(async (resolve, reject) => {\r\n      if (PubSub.state() !== \"CONNECTED\") {\r\n        reject(new Error(\"Not connected\"));\r\n      } else {\r\n        if (!Array.isArray(topics)) {\r\n          topics = [topics];\r\n        }\r\n        topics = await Utils.parseTopics(topics);\r\n        if (topics.length > 0) {\r\n          const data = {\r\n            type: \"LISTEN\",\r\n            nonce: Utils.nonce(),\r\n            data: {\r\n              topics,\r\n              auth_token: Options.get().accessToken,\r\n            },\r\n          };\r\n          this.__send(data)\r\n            .then((response) => {\r\n              if (\r\n                response.type === \"RESPONSE\" &&\r\n                Utils.isEmpty(response.error)\r\n              ) {\r\n                this.__emit(\"subscribed\", topics);\r\n                resolve(Options.addTopics(topics));\r\n              } else {\r\n                reject(new Error(\"Subscription failed\"));\r\n              }\r\n            })\r\n            .catch((e) => {\r\n              reject(e);\r\n            });\r\n        } else {\r\n          resolve(null);\r\n        }\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from a topic or topics (if an array is provided)\r\n   * @param topics Topics to unsubscribe from (if omitted, all topics are unsubscribed)\r\n   * @returns This instance (for chaining)\r\n   * @example\r\n   * pubsub.__unsubscribe(\"test\").then(() => {\r\n   *  console.log(\"Unsubscribed!\");\r\n   * });\r\n   */\r\n  private async __unsubscribe(topics: string[]) {\r\n    await new Promise(async (resolve, reject) => {\r\n      if (PubSub.state() !== \"CONNECTED\") {\r\n        reject(new Error(\"Not connected\"));\r\n      } else {\r\n        if (!Array.isArray(topics)) {\r\n          topics = [topics];\r\n        }\r\n        topics = await Utils.parseTopics(topics ?? Options.get().topics);\r\n        if (topics.length > 0) {\r\n          const data = {\r\n            type: \"UNLISTEN\",\r\n            nonce: Utils.nonce(),\r\n            data: {\r\n              topics,\r\n              auth_token: Options.get().accessToken,\r\n            },\r\n          };\r\n          this.__send(data)\r\n            .then((response) => {\r\n              if (\r\n                response.type === \"RESPONSE\" &&\r\n                Utils.isEmpty(response.error)\r\n              ) {\r\n                this.__emit(\"unsubscribed\", topics);\r\n                resolve(Options.removeTopics(topics));\r\n              } else {\r\n                reject(new Error(\"Unsubscription failed\"));\r\n              }\r\n            })\r\n            .catch((e) => {\r\n              reject(e);\r\n            });\r\n        } else {\r\n          resolve(null);\r\n        }\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Open event handler (Client)\r\n   */\r\n  private __onConnection() {\r\n    if (Options.get().topics) this.__subscribe(Options.get().topics);\r\n    this.__emit(\"connected\");\r\n  }\r\n\r\n  /**\r\n   * Close event handler (Client)\r\n   * @param event Event\r\n   */\r\n  private __onDisconnection(event: CloseEvent) {\r\n    if (!event.wasClean && Options.get().autoReconnect) {\r\n      this.__reconnect();\r\n    }\r\n    this.__emit(\"disconnected\", event);\r\n  }\r\n\r\n  /**\r\n   * Message event handler (Client)\r\n   * @param event The event that was received\r\n   */\r\n  private __onRawMessage(event: MessageEvent) {\r\n    const eventData = JSON.parse(event.data);\r\n    const { type, data } = eventData;\r\n    switch (type) {\r\n      case \"LISTEN\":\r\n      case \"UNLISTEN\":\r\n        this.__emit(type, data);\r\n      case \"RECONNECT\":\r\n      case \"DISCONNECT\":\r\n        this.__emit(type);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Error event handler (Client)\r\n   * @param event The event that was received\r\n   */\r\n  private __onEventError(event: ErrorEvent) {\r\n    this.__emitErrorEvent(event.error);\r\n  }\r\n\r\n  /**\r\n   * Error event handler\r\n   * @param event The error event\r\n   */\r\n  private __emitErrorEvent(event: any) {\r\n    if (event instanceof Error) {\r\n      this.__emit(\"error\", event.message);\r\n    } else {\r\n      this.__emit(\"error\", event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Message event handler\r\n   * @param data The event that was received\r\n   */\r\n  private __onEventMessage(data: any) {\r\n    // Emit raw message as message event\r\n    this.__emit(\"message\", data);\r\n    // Topic and messages (message is a data object from raw message)\r\n    const { topic, message } = data.data;\r\n    // Emit message event for topic\r\n    this.__emit(topic, JSON.parse(message));\r\n    // messageType is the type of topic and messageData is the data of the message\r\n    const { type: messageType, data: messageData } = JSON.parse(message);\r\n    const topicEvents = [\r\n      \"channel-points-channel\",\r\n      \"channel-bits-events\",\r\n      \"channel-bits-badge-unlocks\",\r\n      \"channel-subscribe-events\",\r\n      \"whispers\",\r\n    ];\r\n    // Find the event name for the topic\r\n    const eventName = topicEvents.find((event) => topic.includes(event));\r\n    // Handle events for each topic\r\n    switch (eventName) {\r\n      case \"channel-points-channel\":\r\n        // Channel points events\r\n        this.__onChannelPointsEvent({\r\n          type: messageType,\r\n          data: messageData,\r\n        });\r\n        break;\r\n      case \"channel-bits-events\":\r\n      case \"channel-bits-badge-unlocks\":\r\n        // Channel bits events and badge unlocks\r\n        this.__onBitsEvent({\r\n          type: eventName,\r\n          data: messageData,\r\n        });\r\n        break;\r\n      case \"channel-subscribe-events\":\r\n        // Channel subscription events\r\n        this.__onSubEvent(messageData);\r\n        break;\r\n      case \"whispers\":\r\n        // Whisper events\r\n        this.__onWhisperEvent({\r\n          type: messageData.type,\r\n          data: data.data_object,\r\n        });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Response event handler\r\n   * @param data The response data\r\n   */\r\n  private __onResponseMessage(data: any) {\r\n    let errorMessage: string;\r\n    if (data?.error) {\r\n      switch (data.error) {\r\n        case \"ERR_BADAUTH\":\r\n          errorMessage = \"Invalid authentication token\";\r\n          break;\r\n        case \"ERR_BADTOPIC\":\r\n          errorMessage = \"Invalid topic\";\r\n          break;\r\n        case \"ERR_BADMESSAGE\":\r\n          errorMessage = \"Invalid message\";\r\n          break;\r\n        case \"ERR_SERVER\":\r\n          errorMessage = \"Server error\";\r\n          break;\r\n        default:\r\n          errorMessage = \"Unknown error\" + data.error;\r\n          break;\r\n      }\r\n      this.__emitErrorEvent(errorMessage);\r\n    } else {\r\n      if (data) this.__emit(\"response\", data);\r\n    }\r\n  }\r\n\r\n  private __onPingSent(timestamp: number) {\r\n    this.__timestamp = timestamp;\r\n    this.__emit(\"ping\");\r\n  }\r\n\r\n  /**\r\n   * Pong event handler\r\n   */\r\n  private __onPongReceived(timestamp: number) {\r\n    this.__latency = timestamp - this.__timestamp;\r\n    this.__emit(\"pong\", this.__latency);\r\n    if (this.__latency > 1e4) {\r\n      if (Options.get().autoReconnect) {\r\n        this.__reconnect();\r\n      } else {\r\n        // if latency is greater than 10 seconds\r\n        this.__emit(\"warning\", {\r\n          message: \"Latency is very high\",\r\n          latency: this.__latency,\r\n        });\r\n      }\r\n    } else if (this.__latency > 1e3) {\r\n      // if latency is greater than 1 second\r\n      this.__emit(\"warning\", {\r\n        message: \"Latency is high\",\r\n        latency: this.__latency,\r\n      });\r\n    } else if (this.__latency > 1e2) {\r\n      // if latency is greater than 100 milliseconds\r\n      this.__emit(\"warning\", {\r\n        message: \"Latency is medium\",\r\n        latency: this.__latency,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Bits event handler\r\n   * @param data The data object\r\n   */\r\n  private __onBitsEvent({ type, data }: { type: string; data: any }) {\r\n    switch (type) {\r\n      case \"channel-bits-events\":\r\n        this.__emit(\"bits\", data);\r\n        break;\r\n      case \"channel-bits-badge-unlocks\":\r\n        this.__emit(\"bitsbadge\", data);\r\n        break;\r\n      default:\r\n        this.__emitErrorEvent(new Error(`Unknown message type: ${type}`));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Subscription event handler\r\n   * (sub, resub, subgift, anonsubgift)\r\n   * @param data The data object\r\n   */\r\n  private __onSubEvent(data: any) {\r\n    this.__emit(data.context, {\r\n      userId: data.user_id || null, // user id of the user who subscribed\r\n      userName: data.user_name || null, // user name of the user who subscribed\r\n      displayName: data.display_name || null, // display name of the user who subscribed\r\n      channelId: data.channel_id, // channel id of the channel the subscription was made in\r\n      channelName: data.channel_name, // channel name of the channel the subscription was made in\r\n      time: data.time, // time the subscription was made\r\n      subPlan: data.sub_plan, // subscription plan the user subscribed to\r\n      subPlanName: data.sub_plan_name, // subscription plan name the user subscribed to\r\n      isGift: data.is_gift || false, // whether the subscription was a gift subscription\r\n      months: data.months || null, // number of months the subscription was for\r\n      cumulativeMonths: data.cumulative_months || null, // number of cumulative months the user has subscribed for\r\n      streakMonths: data.streak_months || null, // number of months the user has been subscribed for in a row\r\n      subMessage: data.sub_message || null, // subscription message the user sent\r\n      recipientId: data.recipient_id || null, // user id of the user the subscription was gifted to\r\n      recipientUserName: data.recipient_user_name || null, // user name of the user the subscription was gifted to\r\n      recipientDisplayName: data.recipient_display_name || null, // display name of the user the subscription was gifted to\r\n      multiMonthDuration: data.multi_month_duration || null, // number of months the subscription was for\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Whisper event handler\r\n   * @param data The data object\r\n   */\r\n  private __onWhisperEvent(data: any) {\r\n    this.__emit(data.type, data.data);\r\n  }\r\n\r\n  /**\r\n   * Channel points event handler\r\n   * @param data The data object\r\n   */\r\n  private __onChannelPointsEvent({ type, data }: { type: string; data: any }) {\r\n    switch (type) {\r\n      case \"reward-redeemed\":\r\n        this.__emit(\"reward\", data.redemption);\r\n        this.__emit(type, data.redemption);\r\n        break;\r\n      default:\r\n        this.__emit(type, data);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emit an event\r\n   * @param eventName Event to emit\r\n   * @param args Data to emit\r\n   * @returns This instance\r\n   */\r\n  private __emit(eventName: string, ...args: any[]) {\r\n    eventName = Utils.slug(eventName);\r\n    Emitter.emit(eventName, ...args);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Add a listener to an event\r\n   * @param eventName Event to listen to\r\n   * @param callback Callback to call when the event is emitted\r\n   * @returns This instance\r\n   * @example\r\n   * pubsub.on(\"message\", (data) => {\r\n   *  console.log(data);\r\n   * });\r\n   */\r\n  public on(eventName: string, callback: Function) {\r\n    eventName = Utils.slug(eventName);\r\n    if (eventName === \"\") {\r\n      throw new Error(\"Invalid event name\");\r\n    }\r\n    if (typeof callback !== \"function\") {\r\n      throw new Error(\"Invalid callback\");\r\n    }\r\n    Emitter.on(eventName, callback);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Remove a listener from an event\r\n   * @param eventName Event to remove listener from\r\n   * @param callback Callback to remove\r\n   * @returns This instance\r\n   * @example\r\n   * pubsub.off(\"message\", (data) => {\r\n   *  console.log(data);\r\n   * });\r\n   */\r\n  public off(eventName: string, callback: Function) {\r\n    eventName = Utils.slug(eventName);\r\n    if (eventName === \"\") {\r\n      throw new Error(\"Invalid event name\");\r\n    }\r\n    if (typeof callback !== \"function\") {\r\n      throw new Error(\"Invalid callback\");\r\n    }\r\n    Emitter.removeListener(eventName, callback);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Connect to the pubsub websocket (if not already connected) if autoConnect option is disabled\r\n   * @returns This instance (for chaining) or throws an error if autoConnect is enabled\r\n   * @example\r\n   * pubsub.connect().then(() => {\r\n   *  console.log(\"Connected!\");\r\n   * });\r\n   */\r\n  public connect() {\r\n    if (Options.get().autoConnect) {\r\n      throw new Error(\"autoConnect is enabled\");\r\n    }\r\n    if (PubSub.state() !== \"CONNECTED\") {\r\n      return this.__connect();\r\n    } else {\r\n      return Promise.resolve(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reconnect to pubsub websocket if autoReconnect option is disabled\r\n   * @returns This instance (for chaining) or throws an error if autoReconnect is enabled\r\n   * @example\r\n   * pubsub.reconnect().then(() => {\r\n   *  console.log(\"Reconnected!\");\r\n   * });\r\n   */\r\n  public reconnect() {\r\n    if (Options.get().autoReconnect) {\r\n      throw new Error(\"autoReconnect is enabled\");\r\n    } else {\r\n      return this.__reconnect();\r\n    }\r\n  }\r\n\r\n  /** Disconnect from the pubsub websocket\r\n   * @returns This instance (for chaining)\r\n   * @example\r\n   * pubsub.disconnect().then(() => {\r\n   *  console.log(\"Disconnected!\");\r\n   * });\r\n   */\r\n  public disconnect() {\r\n    return this.__disconnect();\r\n  }\r\n\r\n  /** Get the last latency measurement\r\n   * @returns Latency in milliseconds\r\n   * @example\r\n   * console.log(pubsub.lastLatency());\r\n   * // => 1234\r\n   */\r\n  public lastLatency() {\r\n    return this.__latency;\r\n  }\r\n\r\n  /**\r\n   * Subscribe to a topic or topics (if an array is provided)\r\n   * @param topics Topics to subscribe to\r\n   * @returns This instance (for chaining)\r\n   * @example\r\n   * pubsub.subscribe(\"test\").then(() => {\r\n   *  console.log(\"Subscribed!\");\r\n   * });\r\n   */\r\n  public subscribe(topics: string[]) {\r\n    return this.__subscribe(topics);\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from a topic or topics (if an array is provided)\r\n   * @param topics Topics to unsubscribe from (if omitted, all topics are unsubscribed)\r\n   * @returns This instance (for chaining)\r\n   * @example\r\n   * pubsub.unsubscribe(\"test\").then(() => {\r\n   *  console.log(\"Unsubscribed!\");\r\n   * });\r\n   */\r\n  public unsubscribe(topics: string[]) {\r\n    return this.__unsubscribe(topics);\r\n  }\r\n\r\n  /**\r\n   * Get all topics registered\r\n   * @returns Array of topics\r\n   */\r\n  public registeredTopics() {\r\n    return Options.get().topics || [];\r\n  }\r\n\r\n  /**\r\n   * Get the number of topics registered\r\n   */\r\n  public registeredTopicsCount() {\r\n    return Options.get().topics.length;\r\n  }\r\n\r\n  /**\r\n   * Check if a topic is registered\r\n   * @param topic Topic to check\r\n   * @returns\r\n   */\r\n  public isRegisteredTopic(topic: string) {\r\n    return Options.get().topics.includes(topic);\r\n  }\r\n\r\n  /**\r\n   * Connection status of the pubsub websocket\r\n   * @returns Connection state (\"CONNECTED\", \"CONNECTING\", \"DISCONNECTING\", \"DISCONNECTED\")\r\n   * @example\r\n   * if (pubsub.state() === \"CONNECTED\") {\r\n   *  console.log(\"Connected!\");\r\n   * }\r\n   */\r\n  public state() {\r\n    return PubSub.state();\r\n  }\r\n}\r\n\r\nwindow.AnotherTwitchPubSub = AnotherTwitchPubSub;\r\n\r\ndeclare global {\r\n  interface Window {\r\n    AnotherTwitchPubSub: typeof AnotherTwitchPubSub;\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}