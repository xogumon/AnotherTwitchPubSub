(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}();class t{constructor(){this.events={}}async emit(e,...t){let s=0;return await new Promise((async n=>{if(Array.isArray(e))await Promise.all(e.map((async e=>{await this.emit(e,...t).then((()=>{s++}))})));else if("*"===e)for(const e in this.events)this.events.hasOwnProperty(e)&&this.events[e].forEach((e=>{s++,e(...t)}));else if("string"==typeof e&&e.includes("*")){const[n,...i]=e.split("*");for(const e in this.events)this.events.hasOwnProperty(e)&&e.startsWith(n)&&this.events[e].forEach((e=>{s++,e(...t)}))}else"string"==typeof e&&e.toLowerCase()in this.events&&this.events[e.toLowerCase()].forEach((e=>{s++,e(...t)}));n(s)})),`Emitted ${s} events to listeners`}on(e,t){Array.isArray(e)?e.map((e=>{this.on(e,t)})):"string"==typeof e&&(this.events[e]||(this.events[e]=[]),this.events[e].push(t))}removeListener(e,t){this.events[e]&&(this.events[e]=this.events[e].filter((e=>e!==t)))}removeAllListeners(e){this.events[e]&&(this.events[e]=[])}once(e,t){this.on(e,(s=>{this.removeListener(e,t),t(s)}))}}let s=WebSocket||e.g.WebSocket||window.WebSocket||self.WebSocket;if(!s)throw new Error("WebSocket is not supported by this browser.");const n=s,i=new class{constructor(){this.options={accessToken:"",topics:[],autoConnect:!0,autoReconnect:!0,reconnectInterval:1e4,reconnectAttempts:10}}set(e){return this.options=Object.assign({},this.options,e),this}get(){return this.options}setToken(e){return this.options.accessToken=e,this}setTopics(e){return this.options.topics=e,this}findTopic(e){return this.options.topics.indexOf(e)>-1}addTopic(e){return this.options.topics.includes(e)||this.options.topics.push(e),this}removeTopic(e){const t=this.options.topics.indexOf(e);return t>-1&&this.options.topics.splice(t,1),this}addTopics(e){if(Array.isArray(e))for(const t of e)this.addTopic(t);else this.addTopic(e);return this}removeTopics(e){if(Array.isArray(e))for(const t of e)this.removeTopic(t);else this.removeTopic(e);return this}},r={isEmpty:e=>""===e||0===e||!1===e||null==e||(Array.isArray(e)?0===e.length:"object"==typeof e&&0===Object.keys(e).length),arrayLowerCase:e=>e.map((e=>e.toLowerCase())),repeat(e,t){let s=[];for(let n=0;n<t;n++)s.push(e());return s},nonce(){return this.repeat((()=>Math.random().toString(36).substring(2,15)),2).join("")},toCamelCase:e=>e.replace(/\s(.)/g,(e=>e.toUpperCase())),slug:(e,t="-")=>"string"!=typeof e?"":("string"!=typeof t&&(t="-"),e=e.toLowerCase().replace(/[^a-z0-9]/g,t),t.length>0&&(e=e.replace(new RegExp(`${t}{2,}`,"g"),t).replace(new RegExp(`^${t}|${t}$`,"g"),"")),e),slugToCamelCase(e){return this.slug(e).replace(/-([a-z])/g,(e=>e.toUpperCase())).replace(/-/g,"")},removeDuplicates:e=>e.filter(((t,s)=>e.indexOf(t)===s)),async validateToken(){const e=await fetch("https://id.twitch.tv/oauth2/validate",{headers:{"Content-Type":"application/json",Authorization:`OAuth ${i.get().accessToken}`}});return await e.json()},async getUserId(e){let t;if("string"==typeof e)t=`login=${e}`;else{if("object"!=typeof e)throw new Error("User must be a string or an array of strings");t=e.map((e=>`login=${e}`)).join("&")}try{const s=await this.validateToken();if(s.client_id){if(s.login===e.toLowerCase())return[s.user_id];{const e=await fetch(`https://api.twitch.tv/helix/users?${t}`,{headers:{"Client-ID":s.client_id,Authorization:`Bearer ${i.get().accessToken}`}}),n=await e.json();if(n.data.length>0)return n.data.map((e=>e.id));throw new Error("User not found")}}throw new Error("Invalid token")}catch(e){return console.log(e)}},isNumber:e=>!isNaN(Number(e)),isValidTopic(e){try{if("string"!=typeof e)throw new Error("Invalid topic");if(e.length>100)throw new Error("Topic is too long");if(e.length<5)throw new Error("Topic is too short");if(e.includes(" "))throw new Error("Topic cannot contain spaces");if(!this.getTopicsFormat(e))throw new Error("Topic is invalid");return!0}catch(e){return!1}},getTopicsFormat(e){return{channelBitsEventsV1:"channel-bits-events-v2.$arg1$",channelBitsEventsV2:"channel-bits-events-v2.$arg1$",channelBitsBadgeUnlocks:"channel-bits-badge-unlocks.$arg1$",channelPointsChannelV1:"channel-points-channel-v1.$arg1$",channelSubscribeEventsV1:"channel-subscribe-events-v2.$arg1$",chatModeratorActions:"chat_moderator_actions.$arg1$.$arg2$",automodQueue:"automod-queue.$arg1$.$arg2$",userModerationNotifications:"user-moderation-notifications.$arg1$.$arg2$",whispers:"whispers.$arg1$"}[e=this.slugToCamelCase(e)]},filterTopics(e){return e=this.arrayLowerCase(e),(e=this.removeDuplicates(e)).filter((e=>this.isValidTopic(e)))},async parseTopic(e){let[t,s,n]=e.split(".");const i=this.getTopicsFormat(t);if(i){if(s||n)this.isNumber(s)||this.isNumber(n)?this.isNumber(s)?this.isNumber(n)||([n]=await this.getUserId(n)):[s]=await this.getUserId(s):[s,n]=await this.getUserId([s,n]);else{const e=await this.validateToken();if(!e.login)throw new Error("Invalid token");s=e.user_id,n=e.user_id}return this.isNumber(s)&&this.isNumber(n)?i.replace("$arg1$",s).replace("$arg2$",n):i.replace("$arg1$",s)}return null},async parseTopics(e){return this.filterTopics(e),await Promise.all(e.map((e=>this.parseTopic(e))))}},o=new class extends t{constructor(){super(...arguments),this.heartbeatIntervalMs=6e4}async connect(){return await new Promise(((e,t)=>{this.client=new n("wss://pubsub-edge.twitch.tv"),this.client.onopen=t=>{this.emit("connected",t),this.heartbeatInterval=setInterval((()=>this.heartbeat()),this.heartbeatIntervalMs),e(t)},this.client.onclose=e=>{const s={code:e.code,reason:e.reason,message:null,wasClean:e.wasClean};switch(e.code){case 1e3:s.message="Normal closure";break;case 1001:s.message="Going away";break;case 1002:s.message="Protocol error";break;case 1003:s.message="Unsupported data";break;case 1006:s.message="Abnormal closure";break;case 1007:s.message="Invalid data";break;case 1008:s.message="Policy violation";break;case 1009:s.message="data.Message too big";break;case 1010:s.message="Mandatory extension";break;case 1011:s.message="Internal server error";break;default:s.message="Unknown error"}this.emit("disconnected",s),clearInterval(this.heartbeatInterval),t(new Error(s.message))},this.client.onerror=e=>{this.emit("error",e),t(e)},this.client.onmessage=e=>{this.emit("raw",e);const t=JSON.parse(e.data);switch(t.type){case"PONG":this.emit("pong",Date.now());break;case"MESSAGE":this.emit("message",t);break;case"RESPONSE":t.error?this.emit(`error:${t.nonce}`,t):this.emit(`response:${t.nonce}`,t),this.emit("response",t);break;case"DISCONNECT":this.emit("disconnect",t);break;case"RECONNECT":this.emit("reconnect",t);break;default:this.emit("unknown",t)}}})),this.client}disconnect(){this.client.close()}async send(e){if(this.client.send(JSON.stringify(e)),e.nonce)return await this.waitForResponse(e.nonce)}async waitForResponse(e){return new Promise(((t,s)=>{this.once(`response:${e}`,(e=>{t(e)})),this.once(`error:${e}`,(e=>{s(e)})),this.once(`timeout:${e}`,(()=>{s(new Error("Timeout"))})),setTimeout((()=>{this.emit(`timeout:${e}`)}),1e3)})).then((t=>(this.removeAllListeners(`response:${e}`),this.removeAllListeners(`error:${e}`),this.removeAllListeners(`timeout:${e}`),t))).catch((t=>{throw this.removeAllListeners(`response:${e}`),this.removeAllListeners(`error:${e}`),this.removeAllListeners(`timeout:${e}`),t}))}heartbeat(){this.emit("ping",Date.now()),this.send({type:"PING"})}state(){var e;switch(null===(e=this.client)||void 0===e?void 0:e.readyState){case n.CONNECTING:return"CONNECTING";case n.OPEN:return"CONNECTED";case n.CLOSING:return"DISCONNECTING";case n.CLOSED:default:return"DISCONNECTED"}}},a=new t;window.AnotherTwitchPubSub=class{constructor(e){return this.__latency=0,this.__timestamp=0,i.set(e),i.get().autoConnect&&this.__connect(),o.on("connected",(()=>this.__onConnection())),o.on("disconnected",(e=>this.__onDisconnection(e))),o.on("error",(e=>this.__onEventError(e))),o.on("message",(e=>this.__onEventMessage(e))),o.on("ping",(e=>this.__onPingSent(e))),o.on("pong",(e=>this.__onPongReceived(e))),o.on("raw",(e=>this.__onRawMessage(e))),o.on("response",(e=>this.__onResponseMessage(e))),this}async __connect(){return await new Promise(((e,t)=>{"DISCONNECTED"===o.state()?o.connect().then((()=>{e(null)})).catch((e=>{t(e)})):e(null)})),this}async __disconnect(){return await new Promise((e=>{"CONNECTED"===o.state()?o.disconnect():"DISCONNECTED"===o.state()&&e(null),o.on("disconnected",(()=>{e(null)}))})),this}async __reconnect(e=0){return await new Promise(((t,s)=>{function n(){setTimeout((()=>{o.connect().then((()=>{t(null)})).catch((t=>{setTimeout((()=>{this.__reconnect(e+1)}),i.get().reconnectInterval),s(t)}))}),i.get().reconnectInterval)}"CONNECTING"===o.state()&&s(new Error("Already reconnecting")),e>=i.get().reconnectAttempts&&s(new Error("Reconnect attempts exceeded")),"DISCONNECTED"===o.state()&&n(),"CONNECTED"===o.state()&&0===e&&(o.disconnect(),o.on("disconnected",(()=>{n()})))})),this}async __send(e){if("CONNECTED"===o.state())return await o.send(e);throw new Error("Not connected")}async __subscribe(e){return await new Promise((async(t,s)=>{if("CONNECTED"!==o.state())s(new Error("Not connected"));else if(Array.isArray(e)||(e=[e]),(e=await r.parseTopics(e)).length>0){const n={type:"LISTEN",nonce:r.nonce(),data:{topics:e,auth_token:i.get().accessToken}};this.__send(n).then((n=>{"RESPONSE"===n.type&&r.isEmpty(n.error)?(this.__emit("subscribed",e),t(i.addTopics(e))):s(new Error("Subscription failed"))})).catch((e=>{s(e)}))}else t(null)})),this}async __unsubscribe(e){return await new Promise((async(t,s)=>{if("CONNECTED"!==o.state())s(new Error("Not connected"));else if(Array.isArray(e)||(e=[e]),(e=await r.parseTopics(null!=e?e:i.get().topics)).length>0){const n={type:"UNLISTEN",nonce:r.nonce(),data:{topics:e,auth_token:i.get().accessToken}};this.__send(n).then((n=>{"RESPONSE"===n.type&&r.isEmpty(n.error)?(this.__emit("unsubscribed",e),t(i.removeTopics(e))):s(new Error("Unsubscription failed"))})).catch((e=>{s(e)}))}else t(null)})),this}__onConnection(){i.get().topics&&this.__subscribe(i.get().topics),this.__emit("connected")}__onDisconnection(e){!e.wasClean&&i.get().autoReconnect&&this.__reconnect(),this.__emit("disconnected",e)}__onRawMessage(e){const t=JSON.parse(e.data),{type:s,data:n}=t;switch(s){case"LISTEN":case"UNLISTEN":this.__emit(s,n);case"RECONNECT":case"DISCONNECT":this.__emit(s)}}__onEventError(e){this.__emitErrorEvent(e.error)}__emitErrorEvent(e){e instanceof Error?this.__emit("error",e.message):this.__emit("error",e)}__onEventMessage(e){this.__emit("message",e);const{topic:t,message:s}=e.data;this.__emit(t,JSON.parse(s));const{type:n,data:i}=JSON.parse(s),r=["channel-points-channel","channel-bits-events","channel-bits-badge-unlocks","channel-subscribe-events","whispers"].find((e=>t.includes(e)));switch(r){case"channel-points-channel":this.__onChannelPointsEvent({type:n,data:i});break;case"channel-bits-events":case"channel-bits-badge-unlocks":this.__onBitsEvent({type:r,data:i});break;case"channel-subscribe-events":this.__onSubEvent(i);break;case"whispers":this.__onWhisperEvent({type:i.type,data:e.data_object})}}__onResponseMessage(e){let t;if(null==e?void 0:e.error){switch(e.error){case"ERR_BADAUTH":t="Invalid authentication token";break;case"ERR_BADTOPIC":t="Invalid topic";break;case"ERR_BADMESSAGE":t="Invalid message";break;case"ERR_SERVER":t="Server error";break;default:t="Unknown error"+e.error}this.__emitErrorEvent(t)}else e&&this.__emit("response",e)}__onPingSent(e){this.__timestamp=e,this.__emit("ping")}__onPongReceived(e){this.__latency=e-this.__timestamp,this.__emit("pong",this.__latency),this.__latency>1e4?i.get().autoReconnect?this.__reconnect():this.__emit("warning",{message:"Latency is very high",latency:this.__latency}):this.__latency>1e3?this.__emit("warning",{message:"Latency is high",latency:this.__latency}):this.__latency>100&&this.__emit("warning",{message:"Latency is medium",latency:this.__latency})}__onBitsEvent({type:e,data:t}){switch(e){case"channel-bits-events":this.__emit("bits",t);break;case"channel-bits-badge-unlocks":this.__emit("bitsbadge",t);break;default:this.__emitErrorEvent(new Error(`Unknown message type: ${e}`))}}__onSubEvent(e){this.__emit(e.context,{userId:e.user_id||null,userName:e.user_name||null,displayName:e.display_name||null,channelId:e.channel_id,channelName:e.channel_name,time:e.time,subPlan:e.sub_plan,subPlanName:e.sub_plan_name,isGift:e.is_gift||!1,months:e.months||null,cumulativeMonths:e.cumulative_months||null,streakMonths:e.streak_months||null,subMessage:e.sub_message||null,recipientId:e.recipient_id||null,recipientUserName:e.recipient_user_name||null,recipientDisplayName:e.recipient_display_name||null,multiMonthDuration:e.multi_month_duration||null})}__onWhisperEvent(e){this.__emit(e.type,e.data)}__onChannelPointsEvent({type:e,data:t}){"reward-redeemed"===e?(this.__emit("reward",t.redemption),this.__emit(e,t.redemption)):this.__emit(e,t)}__emit(e,...t){return e=r.slug(e),a.emit(e,...t),this}on(e,t){if(""===(e=r.slug(e)))throw new Error("Invalid event name");if("function"!=typeof t)throw new Error("Invalid callback");return a.on(e,t),this}off(e,t){if(""===(e=r.slug(e)))throw new Error("Invalid event name");if("function"!=typeof t)throw new Error("Invalid callback");return a.removeListener(e,t),this}connect(){if(i.get().autoConnect)throw new Error("autoConnect is enabled");return"CONNECTED"!==o.state()?this.__connect():Promise.resolve(this)}reconnect(){if(i.get().autoReconnect)throw new Error("autoReconnect is enabled");return this.__reconnect()}disconnect(){return this.__disconnect()}lastLatency(){return this.__latency}subscribe(e){return this.__subscribe(e)}unsubscribe(e){return this.__unsubscribe(e)}registeredTopics(){return i.get().topics||[]}registeredTopicsCount(){return i.get().topics.length}isRegisteredTopic(e){return i.get().topics.includes(e)}state(){return o.state()}}})();
//# sourceMappingURL=bundle.min.js.map